<?php

namespace Lauchoit\LaravelHexMod\{{StudlyName}}\Infrastructure\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use App\Http\Controllers\Controller;
use Lauchoit\LaravelHexMod\Shared\Responses\ApiResponse;
use Lauchoit\LaravelHexMod\{{StudlyName}}\Domain\Entity\{{StudlyName}};
use Lauchoit\LaravelHexMod\{{StudlyName}}\Domain\Exceptions\{{StudlyName}}NotFoundException;
use Lauchoit\LaravelHexMod\{{StudlyName}}\Application\UseCases\Create{{StudlyName}}UseCase;
use Lauchoit\LaravelHexMod\{{StudlyName}}\Application\UseCases\DeleteById{{StudlyName}}UseCase;
use Lauchoit\LaravelHexMod\{{StudlyName}}\Application\UseCases\FindAll{{StudlyName}}UseCase;
use Lauchoit\LaravelHexMod\{{StudlyName}}\Application\UseCases\FindById{{StudlyName}}UseCase;
use Lauchoit\LaravelHexMod\{{StudlyName}}\Infrastructure\Requests\Create{{StudlyName}}Request;
use Lauchoit\LaravelHexMod\{{StudlyName}}\Infrastructure\Resources\{{StudlyName}}Resource;


class {{StudlyName}}Controller extends Controller
{
    public function __construct(
        private readonly Create{{StudlyName}}UseCase $create{{StudlyName}}UseCase,
        private readonly FindAll{{StudlyName}}UseCase $findAll{{StudlyName}}UseCase,
        private readonly FindById{{StudlyName}}UseCase $findById{{StudlyName}}UseCase,
        private readonly DeleteById{{StudlyName}}UseCase $deleteById{{StudlyName}}UseCase,
    ) { }

    /**
     * @param Create{{StudlyName}}Request ${{camelName}}
     * @return JsonResponse
     */
    public function create(Create{{StudlyName}}Request ${{camelName}}): JsonResponse
    {
        $new{{StudlyName}} = $this->create{{StudlyName}}UseCase->execute(${{camelName}}->validated());
        return ApiResponse::success(message: ApiResponse::$SUCCESS_CREATED, data: {{StudlyName}}Resource::make($new{{StudlyName}}), code: 201);
    }

    /**
     * @return JsonResponse
     */
    public function findAll(): JsonResponse
    {
        ${{camelName}}s = $this->findAll{{StudlyName}}UseCase->execute();
        return ApiResponse::success(message: ApiResponse::$SUCCESS_SEARCH, data: {{StudlyName}}Resource::collection(${{camelName}}s));
    }

    /**
     * @param int ${{camelName}}Id
     * @return JsonResponse
     */
    public function findById(int ${{camelName}}Id): JsonResponse
    {
        ${{camelName}} = $this->findById{{StudlyName}}UseCase->execute(${{camelName}}Id);
        if (!${{camelName}}) {
            return ApiResponse::error(message: ApiResponse::$ERROR_NOT_FOUND, code: 404);
        }
        return ApiResponse::success(message: ApiResponse::$SUCCESS_SEARCH, data: {{StudlyName}}Resource::make(${{camelName}}));
    }

    /**
     * @param int ${{camelName}}Id
     * @return JsonResponse
     */
    public function deleteById(int ${{camelName}}Id): JsonResponse
    {
        try {
            $deleted = $this->deleteById{{StudlyName}}UseCase->execute(${{camelName}}Id);
            return ApiResponse::success(message: ApiResponse::$SUCCESS_DELETED, data: $deleted);
        } catch ({{StudlyName}}NotFoundException $e) {
            return ApiResponse::error(message: $e->getMessage(), code: 404);
        }
    }

    public function updateById(Request ${{camelName}}): {{StudlyName}}
    {
        dd('Dentro del update');
        throw new \Exception('update Not implemented');
    }

}
